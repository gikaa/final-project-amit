
AMITFINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00001dd8  00001e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800172  00800172  00001f7e  2**0
                  ALLOC
  3 .stab         0000234c  00000000  00000000  00001f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001097  00000000  00000000  000042cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005363  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  000054e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000056b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  000076c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00008835  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009838  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  000099d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  00009c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a547  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <main>
      8a:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__floatunsisf+0xe0>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__floatunsisf+0xbc>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__floatunsisf+0x7c>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__floatunsisf+0x74>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__floatunsisf+0x9e>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__floatunsisf+0xe0>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__floatunsisf+0xe0>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__floatunsisf+0xcc>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__floatunsisf+0xc4>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <ADC_Init>:

/*----------------------------------------------------------------------------*-
ADC_init() : to initialize the ADC to sense temperature from the sensor connected.
-*----------------------------------------------------------------------------*/

void ADC_Init(){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	
	// Choosing reference voltage
	// the AVCC pin.
	SET_BIT(ADMUX,REFS0);
     cde:	a7 e2       	ldi	r26, 0x27	; 39
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e7 e2       	ldi	r30, 0x27	; 39
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 64       	ori	r24, 0x40	; 64
     cea:	8c 93       	st	X, r24
	
	// Choosing Channel One (Single Ended In.) at A0 pin.
	CLR_BIT(ADMUX,MUX0);
     cec:	a7 e2       	ldi	r26, 0x27	; 39
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e7 e2       	ldi	r30, 0x27	; 39
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8e 7f       	andi	r24, 0xFE	; 254
     cf8:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX1);
     cfa:	a7 e2       	ldi	r26, 0x27	; 39
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e7 e2       	ldi	r30, 0x27	; 39
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8d 7f       	andi	r24, 0xFD	; 253
     d06:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX2);
     d08:	a7 e2       	ldi	r26, 0x27	; 39
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e7 e2       	ldi	r30, 0x27	; 39
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8b 7f       	andi	r24, 0xFB	; 251
     d14:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX3);
     d16:	a7 e2       	ldi	r26, 0x27	; 39
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e7 e2       	ldi	r30, 0x27	; 39
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	87 7f       	andi	r24, 0xF7	; 247
     d22:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX4);
     d24:	a7 e2       	ldi	r26, 0x27	; 39
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e7 e2       	ldi	r30, 0x27	; 39
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8f 7e       	andi	r24, 0xEF	; 239
     d30:	8c 93       	st	X, r24
	
	// Choosing the Data to be Right Adjusted in the Data Reg.
	CLR_BIT(ADMUX,ADLAR);
     d32:	a7 e2       	ldi	r26, 0x27	; 39
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e7 e2       	ldi	r30, 0x27	; 39
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8f 7d       	andi	r24, 0xDF	; 223
     d3e:	8c 93       	st	X, r24
	
	// Choosing Prescaler for the ADC clock.
	// the following is choosing (2) as a Prescaler.
	SET_BIT(ADCSRA,ADPS0);
     d40:	a6 e2       	ldi	r26, 0x26	; 38
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e6 e2       	ldi	r30, 0x26	; 38
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	81 60       	ori	r24, 0x01	; 1
     d4c:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS1);
     d4e:	a6 e2       	ldi	r26, 0x26	; 38
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e6 e2       	ldi	r30, 0x26	; 38
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8d 7f       	andi	r24, 0xFD	; 253
     d5a:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS2);
     d5c:	a6 e2       	ldi	r26, 0x26	; 38
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e6 e2       	ldi	r30, 0x26	; 38
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	8b 7f       	andi	r24, 0xFB	; 251
     d68:	8c 93       	st	X, r24
	
	// Enable the ADC
	SET_BIT(ADCSRA,ADEN);
     d6a:	a6 e2       	ldi	r26, 0x26	; 38
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e6 e2       	ldi	r30, 0x26	; 38
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	80 68       	ori	r24, 0x80	; 128
     d76:	8c 93       	st	X, r24
	
}
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <ADC_Read>:

/*----------------------------------------------------------------------------*-
ADC_read() : to read Data from the temperature sensor whenever it's called.
-*----------------------------------------------------------------------------*/

u16 ADC_Read(){
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <ADC_Read+0x6>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
	
	u16 Data;
	
	// Start Conversion
	SET_BIT(ADCSRA,ADSC);
     d88:	a6 e2       	ldi	r26, 0x26	; 38
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e6 e2       	ldi	r30, 0x26	; 38
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	80 64       	ori	r24, 0x40	; 64
     d94:	8c 93       	st	X, r24
	
	// Wait for flag to be set.
	// Indication of finished conversion
	while(is_bit_clr(ADCSRA,ADIF));
     d96:	e6 e2       	ldi	r30, 0x26	; 38
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	81 70       	andi	r24, 0x01	; 1
     da2:	90 70       	andi	r25, 0x00	; 0
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	b9 f3       	breq	.-18     	; 0xd96 <ADC_Read+0x18>
	
	// Read Data from the ADC Data Register
	// Read the Low register first!
	Data = ADCL;
     da8:	e4 e2       	ldi	r30, 0x24	; 36
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
	Data |= (ADCH<<8);
     db6:	e5 e2       	ldi	r30, 0x25	; 37
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	98 2f       	mov	r25, r24
     dc2:	88 27       	eor	r24, r24
     dc4:	9c 01       	movw	r18, r24
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	82 2b       	or	r24, r18
     dcc:	93 2b       	or	r25, r19
     dce:	9a 83       	std	Y+2, r25	; 0x02
     dd0:	89 83       	std	Y+1, r24	; 0x01
	
	// Clear Flag (As we are not using the interrupt)
	// It won't be cleared automatically!
	SET_BIT(ADCSRA,ADIF);
     dd2:	a6 e2       	ldi	r26, 0x26	; 38
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e6 e2       	ldi	r30, 0x26	; 38
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	80 61       	ori	r24, 0x10	; 16
     dde:	8c 93       	st	X, r24
	
	return Data;
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <Buttons_init>:
Buttons_init() : to initialize Buttons by making their pins as INPUT pins,
enabling the internal pull-up resistor, and enabling the external interrupt
for the ON/OFF button.
-*----------------------------------------------------------------------------*/

void Buttons_init(void){
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
	// Setting the pins as INPUT pins
	CLR_BIT(PORT_B_DIR,ON_OFF_PIN);
     df6:	a7 e3       	ldi	r26, 0x37	; 55
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e7 e3       	ldi	r30, 0x37	; 55
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	8b 7f       	andi	r24, 0xFB	; 251
     e02:	8c 93       	st	X, r24
	CLR_BIT(PORT_B_DIR,UP_PIN);
     e04:	a7 e3       	ldi	r26, 0x37	; 55
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e7 e3       	ldi	r30, 0x37	; 55
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	8d 7f       	andi	r24, 0xFD	; 253
     e10:	8c 93       	st	X, r24
	CLR_BIT(PORT_B_DIR,DOWN_PIN);
     e12:	a7 e3       	ldi	r26, 0x37	; 55
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e7 e3       	ldi	r30, 0x37	; 55
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	87 7f       	andi	r24, 0xF7	; 247
     e1e:	8c 93       	st	X, r24
	
	// Enable internal Pull-Up Resistor
	
	SET_BIT(PORT_B,ON_OFF_PIN);
     e20:	a8 e3       	ldi	r26, 0x38	; 56
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e8 e3       	ldi	r30, 0x38	; 56
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	84 60       	ori	r24, 0x04	; 4
     e2c:	8c 93       	st	X, r24
	SET_BIT(PORT_B,UP_PIN);
     e2e:	a8 e3       	ldi	r26, 0x38	; 56
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e8 e3       	ldi	r30, 0x38	; 56
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	82 60       	ori	r24, 0x02	; 2
     e3a:	8c 93       	st	X, r24
	SET_BIT(PORT_B,DOWN_PIN);
     e3c:	a8 e3       	ldi	r26, 0x38	; 56
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e8 e3       	ldi	r30, 0x38	; 56
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 60       	ori	r24, 0x08	; 8
     e48:	8c 93       	st	X, r24
	
	// This Following Section is for the external interrupt
	// assigned to the ON/OFF Button.
	
	// Enable Global Interrupt bit
	 GIE_voidEnable();
     e4a:	0e 94 44 09 	call	0x1288	; 0x1288 <GIE_voidEnable>
	
	// Trigger with Rising Edge
	SET_BIT(MCUCSR,ISC2);
     e4e:	a4 e5       	ldi	r26, 0x54	; 84
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e4 e5       	ldi	r30, 0x54	; 84
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	80 64       	ori	r24, 0x40	; 64
     e5a:	8c 93       	st	X, r24
	
	// Enable INT2 (External Interrupt)
	SET_BIT(GICR,INT2);
     e5c:	ab e5       	ldi	r26, 0x5B	; 91
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	eb e5       	ldi	r30, 0x5B	; 91
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	80 62       	ori	r24, 0x20	; 32
     e68:	8c 93       	st	X, r24
}
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <DOWN>:




u8 DOWN(void){
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	2f 97       	sbiw	r28, 0x0f	; 15
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
	// Check if on for the first time
	if(!(read_bit(PINB,DOWN_PIN))){
     e84:	e6 e3       	ldi	r30, 0x36	; 54
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	88 2f       	mov	r24, r24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	88 70       	andi	r24, 0x08	; 8
     e90:	90 70       	andi	r25, 0x00	; 0
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	09 f0       	breq	.+2      	; 0xe98 <DOWN+0x28>
     e96:	80 c0       	rjmp	.+256    	; 0xf98 <DOWN+0x128>
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	a8 ec       	ldi	r26, 0xC8	; 200
     e9e:	b2 e4       	ldi	r27, 0x42	; 66
     ea0:	8b 87       	std	Y+11, r24	; 0x0b
     ea2:	9c 87       	std	Y+12, r25	; 0x0c
     ea4:	ad 87       	std	Y+13, r26	; 0x0d
     ea6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eaa:	7c 85       	ldd	r23, Y+12	; 0x0c
     eac:	8d 85       	ldd	r24, Y+13	; 0x0d
     eae:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	4a e7       	ldi	r20, 0x7A	; 122
     eb6:	53 e4       	ldi	r21, 0x43	; 67
     eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	8f 83       	std	Y+7, r24	; 0x07
     ec2:	98 87       	std	Y+8, r25	; 0x08
     ec4:	a9 87       	std	Y+9, r26	; 0x09
     ec6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ec8:	6f 81       	ldd	r22, Y+7	; 0x07
     eca:	78 85       	ldd	r23, Y+8	; 0x08
     ecc:	89 85       	ldd	r24, Y+9	; 0x09
     ece:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e8       	ldi	r20, 0x80	; 128
     ed6:	5f e3       	ldi	r21, 0x3F	; 63
     ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     edc:	88 23       	and	r24, r24
     ede:	2c f4       	brge	.+10     	; 0xeea <DOWN+0x7a>
		__ticks = 1;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	9e 83       	std	Y+6, r25	; 0x06
     ee6:	8d 83       	std	Y+5, r24	; 0x05
     ee8:	3f c0       	rjmp	.+126    	; 0xf68 <DOWN+0xf8>
	else if (__tmp > 65535)
     eea:	6f 81       	ldd	r22, Y+7	; 0x07
     eec:	78 85       	ldd	r23, Y+8	; 0x08
     eee:	89 85       	ldd	r24, Y+9	; 0x09
     ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	3f ef       	ldi	r19, 0xFF	; 255
     ef6:	4f e7       	ldi	r20, 0x7F	; 127
     ef8:	57 e4       	ldi	r21, 0x47	; 71
     efa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     efe:	18 16       	cp	r1, r24
     f00:	4c f5       	brge	.+82     	; 0xf54 <DOWN+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f02:	6b 85       	ldd	r22, Y+11	; 0x0b
     f04:	7c 85       	ldd	r23, Y+12	; 0x0c
     f06:	8d 85       	ldd	r24, Y+13	; 0x0d
     f08:	9e 85       	ldd	r25, Y+14	; 0x0e
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e2       	ldi	r20, 0x20	; 32
     f10:	51 e4       	ldi	r21, 0x41	; 65
     f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	bc 01       	movw	r22, r24
     f1c:	cd 01       	movw	r24, r26
     f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	9e 83       	std	Y+6, r25	; 0x06
     f28:	8d 83       	std	Y+5, r24	; 0x05
     f2a:	0f c0       	rjmp	.+30     	; 0xf4a <DOWN+0xda>
     f2c:	89 e1       	ldi	r24, 0x19	; 25
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9c 83       	std	Y+4, r25	; 0x04
     f32:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <DOWN+0xc8>
     f3c:	9c 83       	std	Y+4, r25	; 0x04
     f3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f40:	8d 81       	ldd	r24, Y+5	; 0x05
     f42:	9e 81       	ldd	r25, Y+6	; 0x06
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	9e 83       	std	Y+6, r25	; 0x06
     f48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4a:	8d 81       	ldd	r24, Y+5	; 0x05
     f4c:	9e 81       	ldd	r25, Y+6	; 0x06
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	69 f7       	brne	.-38     	; 0xf2c <DOWN+0xbc>
     f52:	14 c0       	rjmp	.+40     	; 0xf7c <DOWN+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f54:	6f 81       	ldd	r22, Y+7	; 0x07
     f56:	78 85       	ldd	r23, Y+8	; 0x08
     f58:	89 85       	ldd	r24, Y+9	; 0x09
     f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	9e 83       	std	Y+6, r25	; 0x06
     f66:	8d 83       	std	Y+5, r24	; 0x05
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	f1 f7       	brne	.-4      	; 0xf74 <DOWN+0x104>
     f78:	9a 83       	std	Y+2, r25	; 0x02
     f7a:	89 83       	std	Y+1, r24	; 0x01
		// wait for 50 ms to make sure it's on (debouncing solution)
		_delay_ms(DEBOUNCE_INTERVAL);

		// check one more time
		if (!(read_bit(PINB,DOWN_PIN))){
     f7c:	e6 e3       	ldi	r30, 0x36	; 54
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	88 70       	andi	r24, 0x08	; 8
     f88:	90 70       	andi	r25, 0x00	; 0
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	19 f4       	brne	.+6      	; 0xf94 <DOWN+0x124>
			return on;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	8f 87       	std	Y+15, r24	; 0x0f
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <DOWN+0x12a>
		}
		else return NOT_on;
     f94:	1f 86       	std	Y+15, r1	; 0x0f
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <DOWN+0x12a>
	}
	else return NOT_on;
     f98:	1f 86       	std	Y+15, r1	; 0x0f
     f9a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     f9c:	2f 96       	adiw	r28, 0x0f	; 15
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <UP>:
u8 UP(void){
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	2f 97       	sbiw	r28, 0x0f	; 15
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
	// Check if on for the first time
	if(!(read_bit(PINB,UP_PIN))){
     fc2:	e6 e3       	ldi	r30, 0x36	; 54
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	82 70       	andi	r24, 0x02	; 2
     fce:	90 70       	andi	r25, 0x00	; 0
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <UP+0x28>
     fd4:	80 c0       	rjmp	.+256    	; 0x10d6 <UP+0x128>
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a8 ec       	ldi	r26, 0xC8	; 200
     fdc:	b2 e4       	ldi	r27, 0x42	; 66
     fde:	8b 87       	std	Y+11, r24	; 0x0b
     fe0:	9c 87       	std	Y+12, r25	; 0x0c
     fe2:	ad 87       	std	Y+13, r26	; 0x0d
     fe4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fea:	8d 85       	ldd	r24, Y+13	; 0x0d
     fec:	9e 85       	ldd	r25, Y+14	; 0x0e
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	4a e7       	ldi	r20, 0x7A	; 122
     ff4:	53 e4       	ldi	r21, 0x43	; 67
     ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	8f 83       	std	Y+7, r24	; 0x07
    1000:	98 87       	std	Y+8, r25	; 0x08
    1002:	a9 87       	std	Y+9, r26	; 0x09
    1004:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1006:	6f 81       	ldd	r22, Y+7	; 0x07
    1008:	78 85       	ldd	r23, Y+8	; 0x08
    100a:	89 85       	ldd	r24, Y+9	; 0x09
    100c:	9a 85       	ldd	r25, Y+10	; 0x0a
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e8       	ldi	r20, 0x80	; 128
    1014:	5f e3       	ldi	r21, 0x3F	; 63
    1016:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    101a:	88 23       	and	r24, r24
    101c:	2c f4       	brge	.+10     	; 0x1028 <UP+0x7a>
		__ticks = 1;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	9e 83       	std	Y+6, r25	; 0x06
    1024:	8d 83       	std	Y+5, r24	; 0x05
    1026:	3f c0       	rjmp	.+126    	; 0x10a6 <UP+0xf8>
	else if (__tmp > 65535)
    1028:	6f 81       	ldd	r22, Y+7	; 0x07
    102a:	78 85       	ldd	r23, Y+8	; 0x08
    102c:	89 85       	ldd	r24, Y+9	; 0x09
    102e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	3f ef       	ldi	r19, 0xFF	; 255
    1034:	4f e7       	ldi	r20, 0x7F	; 127
    1036:	57 e4       	ldi	r21, 0x47	; 71
    1038:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    103c:	18 16       	cp	r1, r24
    103e:	4c f5       	brge	.+82     	; 0x1092 <UP+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1040:	6b 85       	ldd	r22, Y+11	; 0x0b
    1042:	7c 85       	ldd	r23, Y+12	; 0x0c
    1044:	8d 85       	ldd	r24, Y+13	; 0x0d
    1046:	9e 85       	ldd	r25, Y+14	; 0x0e
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e2       	ldi	r20, 0x20	; 32
    104e:	51 e4       	ldi	r21, 0x41	; 65
    1050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	9e 83       	std	Y+6, r25	; 0x06
    1066:	8d 83       	std	Y+5, r24	; 0x05
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <UP+0xda>
    106a:	89 e1       	ldi	r24, 0x19	; 25
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9c 83       	std	Y+4, r25	; 0x04
    1070:	8b 83       	std	Y+3, r24	; 0x03
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <UP+0xc8>
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	9e 83       	std	Y+6, r25	; 0x06
    1086:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	9e 81       	ldd	r25, Y+6	; 0x06
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	69 f7       	brne	.-38     	; 0x106a <UP+0xbc>
    1090:	14 c0       	rjmp	.+40     	; 0x10ba <UP+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1092:	6f 81       	ldd	r22, Y+7	; 0x07
    1094:	78 85       	ldd	r23, Y+8	; 0x08
    1096:	89 85       	ldd	r24, Y+9	; 0x09
    1098:	9a 85       	ldd	r25, Y+10	; 0x0a
    109a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	9e 83       	std	Y+6, r25	; 0x06
    10a4:	8d 83       	std	Y+5, r24	; 0x05
    10a6:	8d 81       	ldd	r24, Y+5	; 0x05
    10a8:	9e 81       	ldd	r25, Y+6	; 0x06
    10aa:	9a 83       	std	Y+2, r25	; 0x02
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <UP+0x104>
    10b6:	9a 83       	std	Y+2, r25	; 0x02
    10b8:	89 83       	std	Y+1, r24	; 0x01
		// wait for 50 ms to make sure it's on (debouncing solution)
		_delay_ms(DEBOUNCE_INTERVAL);

		// check one more time
		if (!(read_bit(PINB,UP_PIN))){
    10ba:	e6 e3       	ldi	r30, 0x36	; 54
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	82 70       	andi	r24, 0x02	; 2
    10c6:	90 70       	andi	r25, 0x00	; 0
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	19 f4       	brne	.+6      	; 0x10d2 <UP+0x124>
			return on;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	8f 87       	std	Y+15, r24	; 0x0f
    10d0:	03 c0       	rjmp	.+6      	; 0x10d8 <UP+0x12a>
		}
		else return NOT_on;
    10d2:	1f 86       	std	Y+15, r1	; 0x0f
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <UP+0x12a>
	}
	else return NOT_on;
    10d6:	1f 86       	std	Y+15, r1	; 0x0f
    10d8:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    10da:	2f 96       	adiw	r28, 0x0f	; 15
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <heat_init>:
-*----------------------------------------------------------------------------*/

#include "BIT_MATH.h"
#include "Cool_Heat_Elements.h"

void heat_init(void){
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(HEAT_PORT_DIR,HEAT_PIN);
    10f4:	a7 e3       	ldi	r26, 0x37	; 55
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e7 e3       	ldi	r30, 0x37	; 55
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	80 61       	ori	r24, 0x10	; 16
    1100:	8c 93       	st	X, r24
}
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <cool_init>:

void cool_init(void){
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(COOL_PORT_DIR,COOL_PIN);
    1110:	a7 e3       	ldi	r26, 0x37	; 55
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e7 e3       	ldi	r30, 0x37	; 55
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	80 62       	ori	r24, 0x20	; 32
    111c:	8c 93       	st	X, r24
}
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <heat_start>:

/*----------------------------------------------------------------------------*-
Heater/Cooler Start : to start the Heater OR the Cooler.
-*----------------------------------------------------------------------------*/

void heat_start(void){
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(HEAT_PORT,HEAT_PIN);
    112c:	a8 e3       	ldi	r26, 0x38	; 56
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e8 e3       	ldi	r30, 0x38	; 56
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	80 61       	ori	r24, 0x10	; 16
    1138:	8c 93       	st	X, r24
}
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <cool_start>:

void cool_start(void){
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(COOL_PORT,COOL_PIN);
    1148:	a8 e3       	ldi	r26, 0x38	; 56
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e8 e3       	ldi	r30, 0x38	; 56
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	80 62       	ori	r24, 0x20	; 32
    1154:	8c 93       	st	X, r24
}
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <heat_stop>:

/*----------------------------------------------------------------------------*-
Heater/Cooler Stop : to stop Heater OR Cooler from working.
-*----------------------------------------------------------------------------*/

void heat_stop(void){
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(HEAT_PORT,HEAT_PIN);
    1164:	a8 e3       	ldi	r26, 0x38	; 56
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e8 e3       	ldi	r30, 0x38	; 56
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8f 7e       	andi	r24, 0xEF	; 239
    1170:	8c 93       	st	X, r24
}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <cool_stop>:

void cool_stop(void){
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(COOL_PORT,COOL_PIN);
    1180:	a8 e3       	ldi	r26, 0x38	; 56
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e8 e3       	ldi	r30, 0x38	; 56
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	8f 7d       	andi	r24, 0xDF	; 223
    118c:	8c 93       	st	X, r24
}
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <EEPROM_read>:

#include "EEPROM.h"


u8 EEPROM_read(const unsigned short address){
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	00 d0       	rcall	.+0      	; 0x119a <EEPROM_read+0x6>
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	9a 83       	std	Y+2, r25	; 0x02
    11a0:	89 83       	std	Y+1, r24	; 0x01
	// Setup addressess Register
	EEARL = (char)address;
    11a2:	ee e3       	ldi	r30, 0x3E	; 62
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	80 83       	st	Z, r24
	EEARH = (char)(address>>8);
    11aa:	ef e3       	ldi	r30, 0x3F	; 63
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	89 2f       	mov	r24, r25
    11b4:	99 27       	eor	r25, r25
    11b6:	80 83       	st	Z, r24
	
	// Start Reading
	SET_BIT(EECR,EERE);
    11b8:	ac e3       	ldi	r26, 0x3C	; 60
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	ec e3       	ldi	r30, 0x3C	; 60
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	81 60       	ori	r24, 0x01	; 1
    11c4:	8c 93       	st	X, r24
	
	// Return Data
	return EEDR;
    11c6:	ed e3       	ldi	r30, 0x3D	; 61
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <EEPROM_write>:


void EEPROM_write(const unsigned short address, u8 data){
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <EEPROM_write+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <EEPROM_write+0x8>
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	9b 83       	std	Y+3, r25	; 0x03
    11e4:	8a 83       	std	Y+2, r24	; 0x02
    11e6:	6c 83       	std	Y+4, r22	; 0x04
	u8 INT_EN=0;
    11e8:	19 82       	std	Y+1, r1	; 0x01
		
	// Setup addressess Register
	EEARL = (char)address;
    11ea:	ee e3       	ldi	r30, 0x3E	; 62
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	80 83       	st	Z, r24
	EEARH = (char)(address>>8);
    11f2:	ef e3       	ldi	r30, 0x3F	; 63
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	9b 81       	ldd	r25, Y+3	; 0x03
    11fa:	89 2f       	mov	r24, r25
    11fc:	99 27       	eor	r25, r25
    11fe:	80 83       	st	Z, r24
	
	// Put Data in Data Register
	EEDR = data;
    1200:	ed e3       	ldi	r30, 0x3D	; 61
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	80 83       	st	Z, r24
	
	// Disable Interrupts to work fine
	if(((SREG&(1<<7))>>7)==1){
    1208:	ef e5       	ldi	r30, 0x5F	; 95
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	88 1f       	adc	r24, r24
    1210:	88 27       	eor	r24, r24
    1212:	88 1f       	adc	r24, r24
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	90 70       	andi	r25, 0x00	; 0
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	91 05       	cpc	r25, r1
    121e:	49 f4       	brne	.+18     	; 0x1232 <EEPROM_write+0x5c>
		INT_EN = 1;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(SREG,7);
    1224:	af e5       	ldi	r26, 0x5F	; 95
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	ef e5       	ldi	r30, 0x5F	; 95
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	8f 77       	andi	r24, 0x7F	; 127
    1230:	8c 93       	st	X, r24
	}
	
	// Start Writing
	SET_BIT(EECR,EEMWE);
    1232:	ac e3       	ldi	r26, 0x3C	; 60
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	ec e3       	ldi	r30, 0x3C	; 60
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	84 60       	ori	r24, 0x04	; 4
    123e:	8c 93       	st	X, r24
	SET_BIT(EECR,EEWE);
    1240:	ac e3       	ldi	r26, 0x3C	; 60
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	ec e3       	ldi	r30, 0x3C	; 60
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	82 60       	ori	r24, 0x02	; 2
    124c:	8c 93       	st	X, r24
	while(((EECR&(1<<EEWE))>>EEWE)==1);
    124e:	ec e3       	ldi	r30, 0x3C	; 60
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	88 2f       	mov	r24, r24
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	82 70       	andi	r24, 0x02	; 2
    125a:	90 70       	andi	r25, 0x00	; 0
    125c:	95 95       	asr	r25
    125e:	87 95       	ror	r24
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	91 05       	cpc	r25, r1
    1264:	a1 f3       	breq	.-24     	; 0x124e <EEPROM_write+0x78>
	
	// Back
	if (INT_EN==1)
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	39 f4       	brne	.+14     	; 0x127a <EEPROM_write+0xa4>
	{
		SET_BIT(SREG,7);
    126c:	af e5       	ldi	r26, 0x5F	; 95
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ef e5       	ldi	r30, 0x5F	; 95
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	80 68       	ori	r24, 0x80	; 128
    1278:	8c 93       	st	X, r24
	}
	
}
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <GIE_voidEnable>:

#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"GIE_Private.h"
void GIE_voidEnable(void)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1290:	af e5       	ldi	r26, 0x5F	; 95
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	ef e5       	ldi	r30, 0x5F	; 95
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	80 68       	ori	r24, 0x80	; 128
    129c:	8c 93       	st	X, r24
}
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    12ac:	af e5       	ldi	r26, 0x5F	; 95
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	ef e5       	ldi	r30, 0x5F	; 95
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	8f 77       	andi	r24, 0x7F	; 127
    12b8:	8c 93       	st	X, r24
}
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <led_init>:

/*----------------------------------------------------------------------------*-
led_init() : to init. heating element indication led by making it an output pin.
-*----------------------------------------------------------------------------*/

void led_init(void){
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
	
	// PIN 0 in the port is an output pin
	// the LED pin is initially off
	
	SET_BIT(LED_PORT_DIR,LED_PIN);
    12c8:	a7 e3       	ldi	r26, 0x37	; 55
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e7 e3       	ldi	r30, 0x37	; 55
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	81 60       	ori	r24, 0x01	; 1
    12d4:	8c 93       	st	X, r24
	CLR_BIT(LED_PORT,LED_PIN);
    12d6:	a8 e3       	ldi	r26, 0x38	; 56
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e8 e3       	ldi	r30, 0x38	; 56
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8e 7f       	andi	r24, 0xFE	; 254
    12e2:	8c 93       	st	X, r24

}
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <led_on>:

/*----------------------------------------------------------------------------*-
LED control : to turn on/off or toggle the LED.
-*----------------------------------------------------------------------------*/

void led_on(void){
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(LED_PORT,LED_PIN);
    12f2:	a8 e3       	ldi	r26, 0x38	; 56
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e8 e3       	ldi	r30, 0x38	; 56
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	81 60       	ori	r24, 0x01	; 1
    12fe:	8c 93       	st	X, r24
}
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <led_off>:

void led_off(void){
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(LED_PORT,LED_PIN);
    130e:	a8 e3       	ldi	r26, 0x38	; 56
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e8 e3       	ldi	r30, 0x38	; 56
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8e 7f       	andi	r24, 0xFE	; 254
    131a:	8c 93       	st	X, r24
}
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <SevenSegmenDisplay_init>:
-*----------------------------------------------------------------------------*/

// Array for Numbers' Values
u8 Nums[10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};

void SevenSegmenDisplay_init(void){
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
	
	// setting Seven Segment Pins as output pins
	SSD_PORT_DIR = 0xFF;
    132a:	e1 e3       	ldi	r30, 0x31	; 49
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	8f ef       	ldi	r24, 0xFF	; 255
    1330:	80 83       	st	Z, r24
	SET_BIT(SSD_ENABLE_PORT_DIR,SSD1_ENABLE_PIN);
    1332:	a7 e3       	ldi	r26, 0x37	; 55
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e7 e3       	ldi	r30, 0x37	; 55
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	80 64       	ori	r24, 0x40	; 64
    133e:	8c 93       	st	X, r24
	SET_BIT(SSD_ENABLE_PORT_DIR,SSD2_ENABLE_PIN);
    1340:	a7 e3       	ldi	r26, 0x37	; 55
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e7 e3       	ldi	r30, 0x37	; 55
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	80 68       	ori	r24, 0x80	; 128
    134c:	8c 93       	st	X, r24
	
	// Seven Segment initially OFF
	SevenSegmenDisplay_disable();
    134e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <SevenSegmenDisplay_disable>
	
}
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <SevenSegmenDisplay_send>:
	

	
void SevenSegmenDisplay_send(u16 N){
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <SevenSegmenDisplay_send+0x6>
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	9a 83       	std	Y+2, r25	; 0x02
    1364:	89 83       	std	Y+1, r24	; 0x01
	SSD_DATA = Nums[N];
    1366:	a2 e3       	ldi	r26, 0x32	; 50
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	fc 01       	movw	r30, r24
    1370:	e8 59       	subi	r30, 0x98	; 152
    1372:	fe 4f       	sbci	r31, 0xFE	; 254
    1374:	80 81       	ld	r24, Z
    1376:	8c 93       	st	X, r24
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <SevenSegmenDisplay_enable>:


void SevenSegmenDisplay_enable(u8 disp){
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	0f 92       	push	r0
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	89 83       	std	Y+1, r24	; 0x01
	if(disp == 1){
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	79 f4       	brne	.+30     	; 0x13b2 <SevenSegmenDisplay_enable+0x30>
		SET_BIT(SSD_ENABLE_PORT,SSD1_ENABLE_PIN);
    1394:	a8 e3       	ldi	r26, 0x38	; 56
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e8 e3       	ldi	r30, 0x38	; 56
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	80 64       	ori	r24, 0x40	; 64
    13a0:	8c 93       	st	X, r24
		CLR_BIT(SSD_ENABLE_PORT,SSD2_ENABLE_PIN);
    13a2:	a8 e3       	ldi	r26, 0x38	; 56
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e8 e3       	ldi	r30, 0x38	; 56
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	8f 77       	andi	r24, 0x7F	; 127
    13ae:	8c 93       	st	X, r24
    13b0:	11 c0       	rjmp	.+34     	; 0x13d4 <SevenSegmenDisplay_enable+0x52>
	}
	else if (disp == 2){
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	71 f4       	brne	.+28     	; 0x13d4 <SevenSegmenDisplay_enable+0x52>
		SET_BIT(SSD_ENABLE_PORT,SSD2_ENABLE_PIN);
    13b8:	a8 e3       	ldi	r26, 0x38	; 56
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e8 e3       	ldi	r30, 0x38	; 56
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 68       	ori	r24, 0x80	; 128
    13c4:	8c 93       	st	X, r24
		CLR_BIT(SSD_ENABLE_PORT,SSD1_ENABLE_PIN);
    13c6:	a8 e3       	ldi	r26, 0x38	; 56
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e8 e3       	ldi	r30, 0x38	; 56
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	8f 7b       	andi	r24, 0xBF	; 191
    13d2:	8c 93       	st	X, r24
	}
}
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <SevenSegmenDisplay_disable>:

/*----------------------------------------------------------------------------*-
SSD_disable() : To disable the two seven segments for some special cases.
-*----------------------------------------------------------------------------*/

void SevenSegmenDisplay_disable(void){
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SSD_ENABLE_PORT,SSD1_ENABLE_PIN);
    13e4:	a8 e3       	ldi	r26, 0x38	; 56
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e8 e3       	ldi	r30, 0x38	; 56
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	8f 7b       	andi	r24, 0xBF	; 191
    13f0:	8c 93       	st	X, r24
	CLR_BIT(SSD_ENABLE_PORT,SSD2_ENABLE_PIN);
    13f2:	a8 e3       	ldi	r26, 0x38	; 56
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e8 e3       	ldi	r30, 0x38	; 56
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8f 77       	andi	r24, 0x7F	; 127
    13fe:	8c 93       	st	X, r24
}
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <SevenSegmenDisplay_turn_off>:

/*----------------------------------------------------------------------------*-
SSD_turn_off() : To turn off the Seven Segment in the OFF STATE.
-*----------------------------------------------------------------------------*/

void SevenSegmenDisplay_turn_off(void){
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
	SSD_DATA = 0x00;
    140e:	e2 e3       	ldi	r30, 0x32	; 50
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	10 82       	st	Z, r1
}
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <SevenSegmenDisplay_write>:

/*----------------------------------------------------------------------------*-
SSD_write() : To calculate what to write on each of the two SSDs, and send.
-*----------------------------------------------------------------------------*/

void SevenSegmenDisplay_write(u16 N){
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	a0 97       	sbiw	r28, 0x20	; 32
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	98 a3       	std	Y+32, r25	; 0x20
    1430:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 units;
	u8 tens;
	
	units = N % 10;
    1432:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1434:	98 a1       	ldd	r25, Y+32	; 0x20
    1436:	2a e0       	ldi	r18, 0x0A	; 10
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	b9 01       	movw	r22, r18
    143c:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__udivmodhi4>
    1440:	8e 8f       	std	Y+30, r24	; 0x1e
	tens = (int) N / 10;
    1442:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1444:	98 a1       	ldd	r25, Y+32	; 0x20
    1446:	2a e0       	ldi	r18, 0x0A	; 10
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	b9 01       	movw	r22, r18
    144c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__divmodhi4>
    1450:	cb 01       	movw	r24, r22
    1452:	8d 8f       	std	Y+29, r24	; 0x1d
	
	SevenSegmenDisplay_enable(DISP1);
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	0e 94 c1 09 	call	0x1382	; 0x1382 <SevenSegmenDisplay_enable>
	SevenSegmenDisplay_send(units);
    145a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 ac 09 	call	0x1358	; 0x1358 <SevenSegmenDisplay_send>
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a8 e4       	ldi	r26, 0x48	; 72
    146a:	b2 e4       	ldi	r27, 0x42	; 66
    146c:	89 8f       	std	Y+25, r24	; 0x19
    146e:	9a 8f       	std	Y+26, r25	; 0x1a
    1470:	ab 8f       	std	Y+27, r26	; 0x1b
    1472:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1474:	69 8d       	ldd	r22, Y+25	; 0x19
    1476:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1478:	8b 8d       	ldd	r24, Y+27	; 0x1b
    147a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	4a e7       	ldi	r20, 0x7A	; 122
    1482:	53 e4       	ldi	r21, 0x43	; 67
    1484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	8d 8b       	std	Y+21, r24	; 0x15
    148e:	9e 8b       	std	Y+22, r25	; 0x16
    1490:	af 8b       	std	Y+23, r26	; 0x17
    1492:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1494:	6d 89       	ldd	r22, Y+21	; 0x15
    1496:	7e 89       	ldd	r23, Y+22	; 0x16
    1498:	8f 89       	ldd	r24, Y+23	; 0x17
    149a:	98 8d       	ldd	r25, Y+24	; 0x18
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e8       	ldi	r20, 0x80	; 128
    14a2:	5f e3       	ldi	r21, 0x3F	; 63
    14a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a8:	88 23       	and	r24, r24
    14aa:	2c f4       	brge	.+10     	; 0x14b6 <SevenSegmenDisplay_write+0x9c>
		__ticks = 1;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9c 8b       	std	Y+20, r25	; 0x14
    14b2:	8b 8b       	std	Y+19, r24	; 0x13
    14b4:	3f c0       	rjmp	.+126    	; 0x1534 <SevenSegmenDisplay_write+0x11a>
	else if (__tmp > 65535)
    14b6:	6d 89       	ldd	r22, Y+21	; 0x15
    14b8:	7e 89       	ldd	r23, Y+22	; 0x16
    14ba:	8f 89       	ldd	r24, Y+23	; 0x17
    14bc:	98 8d       	ldd	r25, Y+24	; 0x18
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	3f ef       	ldi	r19, 0xFF	; 255
    14c2:	4f e7       	ldi	r20, 0x7F	; 127
    14c4:	57 e4       	ldi	r21, 0x47	; 71
    14c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ca:	18 16       	cp	r1, r24
    14cc:	4c f5       	brge	.+82     	; 0x1520 <SevenSegmenDisplay_write+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ce:	69 8d       	ldd	r22, Y+25	; 0x19
    14d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 e2       	ldi	r20, 0x20	; 32
    14dc:	51 e4       	ldi	r21, 0x41	; 65
    14de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	bc 01       	movw	r22, r24
    14e8:	cd 01       	movw	r24, r26
    14ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	9c 8b       	std	Y+20, r25	; 0x14
    14f4:	8b 8b       	std	Y+19, r24	; 0x13
    14f6:	0f c0       	rjmp	.+30     	; 0x1516 <SevenSegmenDisplay_write+0xfc>
    14f8:	89 e1       	ldi	r24, 0x19	; 25
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	9a 8b       	std	Y+18, r25	; 0x12
    14fe:	89 8b       	std	Y+17, r24	; 0x11
    1500:	89 89       	ldd	r24, Y+17	; 0x11
    1502:	9a 89       	ldd	r25, Y+18	; 0x12
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	f1 f7       	brne	.-4      	; 0x1504 <SevenSegmenDisplay_write+0xea>
    1508:	9a 8b       	std	Y+18, r25	; 0x12
    150a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150c:	8b 89       	ldd	r24, Y+19	; 0x13
    150e:	9c 89       	ldd	r25, Y+20	; 0x14
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	9c 8b       	std	Y+20, r25	; 0x14
    1514:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1516:	8b 89       	ldd	r24, Y+19	; 0x13
    1518:	9c 89       	ldd	r25, Y+20	; 0x14
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	69 f7       	brne	.-38     	; 0x14f8 <SevenSegmenDisplay_write+0xde>
    151e:	14 c0       	rjmp	.+40     	; 0x1548 <SevenSegmenDisplay_write+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1520:	6d 89       	ldd	r22, Y+21	; 0x15
    1522:	7e 89       	ldd	r23, Y+22	; 0x16
    1524:	8f 89       	ldd	r24, Y+23	; 0x17
    1526:	98 8d       	ldd	r25, Y+24	; 0x18
    1528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	9c 8b       	std	Y+20, r25	; 0x14
    1532:	8b 8b       	std	Y+19, r24	; 0x13
    1534:	8b 89       	ldd	r24, Y+19	; 0x13
    1536:	9c 89       	ldd	r25, Y+20	; 0x14
    1538:	98 8b       	std	Y+16, r25	; 0x10
    153a:	8f 87       	std	Y+15, r24	; 0x0f
    153c:	8f 85       	ldd	r24, Y+15	; 0x0f
    153e:	98 89       	ldd	r25, Y+16	; 0x10
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	f1 f7       	brne	.-4      	; 0x1540 <SevenSegmenDisplay_write+0x126>
    1544:	98 8b       	std	Y+16, r25	; 0x10
    1546:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	
	SevenSegmenDisplay_enable(DISP2);
    1548:	82 e0       	ldi	r24, 0x02	; 2
    154a:	0e 94 c1 09 	call	0x1382	; 0x1382 <SevenSegmenDisplay_enable>
	SevenSegmenDisplay_send(tens);
    154e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1550:	88 2f       	mov	r24, r24
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 ac 09 	call	0x1358	; 0x1358 <SevenSegmenDisplay_send>
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a8 e4       	ldi	r26, 0x48	; 72
    155e:	b2 e4       	ldi	r27, 0x42	; 66
    1560:	8b 87       	std	Y+11, r24	; 0x0b
    1562:	9c 87       	std	Y+12, r25	; 0x0c
    1564:	ad 87       	std	Y+13, r26	; 0x0d
    1566:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1568:	6b 85       	ldd	r22, Y+11	; 0x0b
    156a:	7c 85       	ldd	r23, Y+12	; 0x0c
    156c:	8d 85       	ldd	r24, Y+13	; 0x0d
    156e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	4a e7       	ldi	r20, 0x7A	; 122
    1576:	53 e4       	ldi	r21, 0x43	; 67
    1578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	8f 83       	std	Y+7, r24	; 0x07
    1582:	98 87       	std	Y+8, r25	; 0x08
    1584:	a9 87       	std	Y+9, r26	; 0x09
    1586:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1588:	6f 81       	ldd	r22, Y+7	; 0x07
    158a:	78 85       	ldd	r23, Y+8	; 0x08
    158c:	89 85       	ldd	r24, Y+9	; 0x09
    158e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e8       	ldi	r20, 0x80	; 128
    1596:	5f e3       	ldi	r21, 0x3F	; 63
    1598:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159c:	88 23       	and	r24, r24
    159e:	2c f4       	brge	.+10     	; 0x15aa <SevenSegmenDisplay_write+0x190>
		__ticks = 1;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	9e 83       	std	Y+6, r25	; 0x06
    15a6:	8d 83       	std	Y+5, r24	; 0x05
    15a8:	3f c0       	rjmp	.+126    	; 0x1628 <SevenSegmenDisplay_write+0x20e>
	else if (__tmp > 65535)
    15aa:	6f 81       	ldd	r22, Y+7	; 0x07
    15ac:	78 85       	ldd	r23, Y+8	; 0x08
    15ae:	89 85       	ldd	r24, Y+9	; 0x09
    15b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	3f ef       	ldi	r19, 0xFF	; 255
    15b6:	4f e7       	ldi	r20, 0x7F	; 127
    15b8:	57 e4       	ldi	r21, 0x47	; 71
    15ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15be:	18 16       	cp	r1, r24
    15c0:	4c f5       	brge	.+82     	; 0x1614 <SevenSegmenDisplay_write+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e2       	ldi	r20, 0x20	; 32
    15d0:	51 e4       	ldi	r21, 0x41	; 65
    15d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	bc 01       	movw	r22, r24
    15dc:	cd 01       	movw	r24, r26
    15de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	9e 83       	std	Y+6, r25	; 0x06
    15e8:	8d 83       	std	Y+5, r24	; 0x05
    15ea:	0f c0       	rjmp	.+30     	; 0x160a <SevenSegmenDisplay_write+0x1f0>
    15ec:	89 e1       	ldi	r24, 0x19	; 25
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	9c 83       	std	Y+4, r25	; 0x04
    15f2:	8b 83       	std	Y+3, r24	; 0x03
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <SevenSegmenDisplay_write+0x1de>
    15fc:	9c 83       	std	Y+4, r25	; 0x04
    15fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1600:	8d 81       	ldd	r24, Y+5	; 0x05
    1602:	9e 81       	ldd	r25, Y+6	; 0x06
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	9e 83       	std	Y+6, r25	; 0x06
    1608:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	69 f7       	brne	.-38     	; 0x15ec <SevenSegmenDisplay_write+0x1d2>
    1612:	14 c0       	rjmp	.+40     	; 0x163c <SevenSegmenDisplay_write+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1614:	6f 81       	ldd	r22, Y+7	; 0x07
    1616:	78 85       	ldd	r23, Y+8	; 0x08
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	9e 83       	std	Y+6, r25	; 0x06
    1626:	8d 83       	std	Y+5, r24	; 0x05
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
    162a:	9e 81       	ldd	r25, Y+6	; 0x06
    162c:	9a 83       	std	Y+2, r25	; 0x02
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	9a 81       	ldd	r25, Y+2	; 0x02
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <SevenSegmenDisplay_write+0x21a>
    1638:	9a 83       	std	Y+2, r25	; 0x02
    163a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    163c:	a0 96       	adiw	r28, 0x20	; 32
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <timer1_init>:

#include "Timer.h"



void timer1_init(){
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
	
	// Select CTC Mode
	SET_BIT(TCCR1B,WGM12);
    1656:	ae e4       	ldi	r26, 0x4E	; 78
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	ee e4       	ldi	r30, 0x4E	; 78
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	88 60       	ori	r24, 0x08	; 8
    1662:	8c 93       	st	X, r24
	
	
	// Load Value in OCR1A
	OCR1AH = 0b00000000;
    1664:	eb e4       	ldi	r30, 0x4B	; 75
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	10 82       	st	Z, r1
	OCR1AL = 0b01100010;
    166a:	ea e4       	ldi	r30, 0x4A	; 74
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	82 e6       	ldi	r24, 0x62	; 98
    1670:	80 83       	st	Z, r24
	// Load Value in OCR1B
	OCR1BH = 0b00000011;
	OCR1BL = 0b11010001;
	*/
	// Select Clock Prescaler (F_CPU / 1024)
	SET_BIT(TCCR1B,CS10);
    1672:	ae e4       	ldi	r26, 0x4E	; 78
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	ee e4       	ldi	r30, 0x4E	; 78
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	81 60       	ori	r24, 0x01	; 1
    167e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    1680:	ae e4       	ldi	r26, 0x4E	; 78
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	ee e4       	ldi	r30, 0x4E	; 78
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	8d 7f       	andi	r24, 0xFD	; 253
    168c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS12);
    168e:	ae e4       	ldi	r26, 0x4E	; 78
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	ee e4       	ldi	r30, 0x4E	; 78
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	84 60       	ori	r24, 0x04	; 4
    169a:	8c 93       	st	X, r24
	
	// Enable Global Interrupt bit
	GIE_voidEnable();
    169c:	0e 94 44 09 	call	0x1288	; 0x1288 <GIE_voidEnable>

}
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <timer0_init>:



void timer0_init(){
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
	
	// choose mode
	SET_BIT(TCCR0,WGM01);
    16ae:	a3 e5       	ldi	r26, 0x53	; 83
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e3 e5       	ldi	r30, 0x53	; 83
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	88 60       	ori	r24, 0x08	; 8
    16ba:	8c 93       	st	X, r24
	
	// Load Value in OCR0
	OCR0 = 250;
    16bc:	ec e5       	ldi	r30, 0x5C	; 92
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	8a ef       	ldi	r24, 0xFA	; 250
    16c2:	80 83       	st	Z, r24
	
	// Choose Prescaler
	SET_BIT(TCCR0,CS00);
    16c4:	a3 e5       	ldi	r26, 0x53	; 83
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e3 e5       	ldi	r30, 0x53	; 83
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	81 60       	ori	r24, 0x01	; 1
    16d0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
    16d2:	a3 e5       	ldi	r26, 0x53	; 83
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e3 e5       	ldi	r30, 0x53	; 83
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	84 60       	ori	r24, 0x04	; 4
    16de:	8c 93       	st	X, r24
	
	// Enable Timer INT
	GIE_voidEnable();
    16e0:	0e 94 44 09 	call	0x1288	; 0x1288 <GIE_voidEnable>
	SET_BIT(TIMSK,OCIE0);
    16e4:	a9 e5       	ldi	r26, 0x59	; 89
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e9 e5       	ldi	r30, 0x59	; 89
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	82 60       	ori	r24, 0x02	; 2
    16f0:	8c 93       	st	X, r24
	
}
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <timer1_INT_disable>:

/*----------------------------------------------------------------------------*-
timer1_INT_disable() : to stop timer(1) from triggering INTERRUPTS.
-*----------------------------------------------------------------------------*/

void timer1_INT_disable(){
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
	

	CLR_BIT(TIMSK,OCIE1A);
    1700:	a9 e5       	ldi	r26, 0x59	; 89
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e9 e5       	ldi	r30, 0x59	; 89
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	8f 7e       	andi	r24, 0xEF	; 239
    170c:	8c 93       	st	X, r24

}
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <timer1_INT_enable>:


void timer1_INT_enable(){
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
	

	SET_BIT(TIMSK,OCIE1A);
    171c:	a9 e5       	ldi	r26, 0x59	; 89
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e9 e5       	ldi	r30, 0x59	; 89
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	80 61       	ori	r24, 0x10	; 16
    1728:	8c 93       	st	X, r24

}
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <sys_init>:
-*----------------------------------------------------------------------------*/

#include "control.h"

void sys_init(void)
{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
	// Modules init
	GIE_voidEnable();
    1738:	0e 94 44 09 	call	0x1288	; 0x1288 <GIE_voidEnable>
	ADC_Init();
    173c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <ADC_Init>
	timer0_init();
    1740:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <timer0_init>
	timer1_init();
    1744:	0e 94 27 0b 	call	0x164e	; 0x164e <timer1_init>
	timer1_INT_enable();
    1748:	0e 94 8a 0b 	call	0x1714	; 0x1714 <timer1_INT_enable>
	Buttons_init();
    174c:	0e 94 f7 06 	call	0xdee	; 0xdee <Buttons_init>
	cool_init();
    1750:	0e 94 84 08 	call	0x1108	; 0x1108 <cool_init>
	heat_init();
    1754:	0e 94 76 08 	call	0x10ec	; 0x10ec <heat_init>
	led_init();
    1758:	0e 94 60 09 	call	0x12c0	; 0x12c0 <led_init>
	SevenSegmenDisplay_init();
    175c:	0e 94 91 09 	call	0x1322	; 0x1322 <SevenSegmenDisplay_init>
	Current_stat = OFF;
    1760:	10 92 7e 01 	sts	0x017E, r1
	

	if(EEPROM_read(0x0000) != 0xFF){
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 ca 08 	call	0x1194	; 0x1194 <EEPROM_read>
    176c:	8f 3f       	cpi	r24, 0xFF	; 255
    176e:	59 f0       	breq	.+22     	; 0x1786 <sys_init+0x56>
		desired_temp = EEPROM_read(0x0000);
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 94 ca 08 	call	0x1194	; 0x1194 <EEPROM_read>
    1778:	88 2f       	mov	r24, r24
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	90 93 77 01 	sts	0x0177, r25
    1780:	80 93 76 01 	sts	0x0176, r24
    1784:	06 c0       	rjmp	.+12     	; 0x1792 <sys_init+0x62>
	}
	else{
		desired_temp = INIT_DESIRED_TEMP;
    1786:	8d e2       	ldi	r24, 0x2D	; 45
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	90 93 77 01 	sts	0x0177, r25
    178e:	80 93 76 01 	sts	0x0176, r24
	}
	
	temp_arr_init();
    1792:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <temp_arr_init>
	EEPROM_write(0x0000,(u8) desired_temp);
    1796:	80 91 76 01 	lds	r24, 0x0176
    179a:	90 91 77 01 	lds	r25, 0x0177
    179e:	28 2f       	mov	r18, r24
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	62 2f       	mov	r22, r18
    17a6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <EEPROM_write>
	
}
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <OFF_stat>:



void OFF_stat(void)
{
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
		SevenSegmenDisplay_turn_off();
    17b8:	0e 94 03 0a 	call	0x1406	; 0x1406 <SevenSegmenDisplay_turn_off>
		led_off();
    17bc:	0e 94 83 09 	call	0x1306	; 0x1306 <led_off>
		heat_stop();
    17c0:	0e 94 ae 08 	call	0x115c	; 0x115c <heat_stop>
		cool_stop();
    17c4:	0e 94 bc 08 	call	0x1178	; 0x1178 <cool_stop>
		go_to_sleep();
    17c8:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <go_to_sleep>
}
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <ON_stat>:


void ON_stat(void)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
	

		
	if (temp_measure_f == 1){
    17da:	80 91 74 01 	lds	r24, 0x0174
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	91 f5       	brne	.+100    	; 0x1846 <ON_stat+0x74>
		actual_temp = (ADC_Read()*0.5);
    17e2:	0e 94 bf 06 	call	0xd7e	; 0xd7e <ADC_Read>
    17e6:	cc 01       	movw	r24, r24
    17e8:	a0 e0       	ldi	r26, 0x00	; 0
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	bc 01       	movw	r22, r24
    17ee:	cd 01       	movw	r24, r26
    17f0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	bc 01       	movw	r22, r24
    17fa:	cd 01       	movw	r24, r26
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	5f e3       	ldi	r21, 0x3F	; 63
    1804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	90 93 7b 01 	sts	0x017B, r25
    181c:	80 93 7a 01 	sts	0x017A, r24
		add_new_temp(temp_arr , actual_temp);
    1820:	20 91 7a 01 	lds	r18, 0x017A
    1824:	30 91 7b 01 	lds	r19, 0x017B
    1828:	80 e8       	ldi	r24, 0x80	; 128
    182a:	91 e0       	ldi	r25, 0x01	; 1
    182c:	b9 01       	movw	r22, r18
    182e:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <add_new_temp>
		avg_temp = calculate_avg_temp(temp_arr);
    1832:	80 e8       	ldi	r24, 0x80	; 128
    1834:	91 e0       	ldi	r25, 0x01	; 1
    1836:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <calculate_avg_temp>
    183a:	90 93 7d 01 	sts	0x017D, r25
    183e:	80 93 7c 01 	sts	0x017C, r24
		temp_measure_f = 0;
    1842:	10 92 74 01 	sts	0x0174, r1
	}
	
	SevenSegmenDisplay_write(actual_temp);
    1846:	80 91 7a 01 	lds	r24, 0x017A
    184a:	90 91 7b 01 	lds	r25, 0x017B
    184e:	0e 94 0d 0a 	call	0x141a	; 0x141a <SevenSegmenDisplay_write>

	
	change_temp();
    1852:	0e 94 9d 0c 	call	0x193a	; 0x193a <change_temp>
	 

	
	if(UP()==on || DOWN()==on){
    1856:	0e 94 d7 07 	call	0xfae	; 0xfae <UP>
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	21 f0       	breq	.+8      	; 0x1866 <ON_stat+0x94>
    185e:	0e 94 38 07 	call	0xe70	; 0xe70 <DOWN>
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	39 f4       	brne	.+14     	; 0x1874 <ON_stat+0xa2>

		SevenSegmenDisplay_disable();
    1866:	0e 94 ee 09 	call	0x13dc	; 0x13dc <SevenSegmenDisplay_disable>
		setting_counter = 0;
    186a:	10 92 75 01 	sts	0x0175, r1
		Current_stat = SETTING;
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	80 93 7e 01 	sts	0x017E, r24
			
	}
}
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <SET_stat>:


void SET_stat(void)
{
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
	heat_stop();
    1882:	0e 94 ae 08 	call	0x115c	; 0x115c <heat_stop>
	cool_stop();
    1886:	0e 94 bc 08 	call	0x1178	; 0x1178 <cool_stop>
	led_off();
    188a:	0e 94 83 09 	call	0x1306	; 0x1306 <led_off>
	

	
	if(toggle_f == 1){
    188e:	80 91 78 01 	lds	r24, 0x0178
    1892:	90 91 79 01 	lds	r25, 0x0179
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	91 05       	cpc	r25, r1
    189a:	39 f4       	brne	.+14     	; 0x18aa <SET_stat+0x30>
		SevenSegmenDisplay_write(desired_temp);
    189c:	80 91 76 01 	lds	r24, 0x0176
    18a0:	90 91 77 01 	lds	r25, 0x0177
    18a4:	0e 94 0d 0a 	call	0x141a	; 0x141a <SevenSegmenDisplay_write>
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <SET_stat+0x34>
	}
	else{
		SevenSegmenDisplay_turn_off();
    18aa:	0e 94 03 0a 	call	0x1406	; 0x1406 <SevenSegmenDisplay_turn_off>
	}
	

	
	if((UP() == on) && (desired_temp < MAX_TEMP)){
    18ae:	0e 94 d7 07 	call	0xfae	; 0xfae <UP>
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	c9 f4       	brne	.+50     	; 0x18e8 <SET_stat+0x6e>
    18b6:	80 91 76 01 	lds	r24, 0x0176
    18ba:	90 91 77 01 	lds	r25, 0x0177
    18be:	8b 34       	cpi	r24, 0x4B	; 75
    18c0:	91 05       	cpc	r25, r1
    18c2:	90 f4       	brcc	.+36     	; 0x18e8 <SET_stat+0x6e>
		desired_temp = desired_temp + 5;
    18c4:	80 91 76 01 	lds	r24, 0x0176
    18c8:	90 91 77 01 	lds	r25, 0x0177
    18cc:	05 96       	adiw	r24, 0x05	; 5
    18ce:	90 93 77 01 	sts	0x0177, r25
    18d2:	80 93 76 01 	sts	0x0176, r24
		setting_counter = 0;
    18d6:	10 92 75 01 	sts	0x0175, r1
		SevenSegmenDisplay_write(desired_temp);
    18da:	80 91 76 01 	lds	r24, 0x0176
    18de:	90 91 77 01 	lds	r25, 0x0177
    18e2:	0e 94 0d 0a 	call	0x141a	; 0x141a <SevenSegmenDisplay_write>
    18e6:	1c c0       	rjmp	.+56     	; 0x1920 <SET_stat+0xa6>
	}
	else if ((DOWN() == on) && (desired_temp > MIN_TEMP)){
    18e8:	0e 94 38 07 	call	0xe70	; 0xe70 <DOWN>
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	c1 f4       	brne	.+48     	; 0x1920 <SET_stat+0xa6>
    18f0:	80 91 76 01 	lds	r24, 0x0176
    18f4:	90 91 77 01 	lds	r25, 0x0177
    18f8:	84 32       	cpi	r24, 0x24	; 36
    18fa:	91 05       	cpc	r25, r1
    18fc:	88 f0       	brcs	.+34     	; 0x1920 <SET_stat+0xa6>
		desired_temp = desired_temp - 5;
    18fe:	80 91 76 01 	lds	r24, 0x0176
    1902:	90 91 77 01 	lds	r25, 0x0177
    1906:	05 97       	sbiw	r24, 0x05	; 5
    1908:	90 93 77 01 	sts	0x0177, r25
    190c:	80 93 76 01 	sts	0x0176, r24
		setting_counter = 0;
    1910:	10 92 75 01 	sts	0x0175, r1
		SevenSegmenDisplay_write(desired_temp);
    1914:	80 91 76 01 	lds	r24, 0x0176
    1918:	90 91 77 01 	lds	r25, 0x0177
    191c:	0e 94 0d 0a 	call	0x141a	; 0x141a <SevenSegmenDisplay_write>
	}
	
	EEPROM_write(0x0000,desired_temp);
    1920:	80 91 76 01 	lds	r24, 0x0176
    1924:	90 91 77 01 	lds	r25, 0x0177
    1928:	28 2f       	mov	r18, r24
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	62 2f       	mov	r22, r18
    1930:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <EEPROM_write>
	
}
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <change_temp>:


void change_temp(void)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
	if( (desired_temp < avg_temp + MARGIN_TEMP) && (desired_temp > avg_temp - MARGIN_TEMP) ){
    1942:	80 91 7c 01 	lds	r24, 0x017C
    1946:	90 91 7d 01 	lds	r25, 0x017D
    194a:	9c 01       	movw	r18, r24
    194c:	2c 5f       	subi	r18, 0xFC	; 252
    194e:	3f 4f       	sbci	r19, 0xFF	; 255
    1950:	80 91 76 01 	lds	r24, 0x0176
    1954:	90 91 77 01 	lds	r25, 0x0177
    1958:	82 17       	cp	r24, r18
    195a:	93 07       	cpc	r25, r19
    195c:	a8 f4       	brcc	.+42     	; 0x1988 <change_temp+0x4e>
    195e:	80 91 7c 01 	lds	r24, 0x017C
    1962:	90 91 7d 01 	lds	r25, 0x017D
    1966:	9c 01       	movw	r18, r24
    1968:	24 50       	subi	r18, 0x04	; 4
    196a:	30 40       	sbci	r19, 0x00	; 0
    196c:	80 91 76 01 	lds	r24, 0x0176
    1970:	90 91 77 01 	lds	r25, 0x0177
    1974:	28 17       	cp	r18, r24
    1976:	39 07       	cpc	r19, r25
    1978:	38 f4       	brcc	.+14     	; 0x1988 <change_temp+0x4e>

		heat_stop();
    197a:	0e 94 ae 08 	call	0x115c	; 0x115c <heat_stop>
		cool_stop();
    197e:	0e 94 bc 08 	call	0x1178	; 0x1178 <cool_stop>
		led_off();
    1982:	0e 94 83 09 	call	0x1306	; 0x1306 <led_off>
    1986:	33 c0       	rjmp	.+102    	; 0x19ee <change_temp+0xb4>
	}
	else if(desired_temp < avg_temp + MARGIN_TEMP){
    1988:	80 91 7c 01 	lds	r24, 0x017C
    198c:	90 91 7d 01 	lds	r25, 0x017D
    1990:	9c 01       	movw	r18, r24
    1992:	2c 5f       	subi	r18, 0xFC	; 252
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	80 91 76 01 	lds	r24, 0x0176
    199a:	90 91 77 01 	lds	r25, 0x0177
    199e:	82 17       	cp	r24, r18
    19a0:	93 07       	cpc	r25, r19
    19a2:	38 f4       	brcc	.+14     	; 0x19b2 <change_temp+0x78>

		
		heat_stop();
    19a4:	0e 94 ae 08 	call	0x115c	; 0x115c <heat_stop>
		cool_start();
    19a8:	0e 94 a0 08 	call	0x1140	; 0x1140 <cool_start>
		led_on();
    19ac:	0e 94 75 09 	call	0x12ea	; 0x12ea <led_on>
    19b0:	1e c0       	rjmp	.+60     	; 0x19ee <change_temp+0xb4>
	}
	else if (desired_temp > avg_temp - MARGIN_TEMP){
    19b2:	80 91 7c 01 	lds	r24, 0x017C
    19b6:	90 91 7d 01 	lds	r25, 0x017D
    19ba:	9c 01       	movw	r18, r24
    19bc:	24 50       	subi	r18, 0x04	; 4
    19be:	30 40       	sbci	r19, 0x00	; 0
    19c0:	80 91 76 01 	lds	r24, 0x0176
    19c4:	90 91 77 01 	lds	r25, 0x0177
    19c8:	28 17       	cp	r18, r24
    19ca:	39 07       	cpc	r19, r25
    19cc:	80 f4       	brcc	.+32     	; 0x19ee <change_temp+0xb4>

		
		heat_start();
    19ce:	0e 94 92 08 	call	0x1124	; 0x1124 <heat_start>
		cool_stop();
    19d2:	0e 94 bc 08 	call	0x1178	; 0x1178 <cool_stop>
		if (toggle_f == 1)
    19d6:	80 91 78 01 	lds	r24, 0x0178
    19da:	90 91 79 01 	lds	r25, 0x0179
    19de:	81 30       	cpi	r24, 0x01	; 1
    19e0:	91 05       	cpc	r25, r1
    19e2:	19 f4       	brne	.+6      	; 0x19ea <change_temp+0xb0>
		{
			led_on();
    19e4:	0e 94 75 09 	call	0x12ea	; 0x12ea <led_on>
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <change_temp+0xb4>
		}
		else {
			led_off();
    19ea:	0e 94 83 09 	call	0x1306	; 0x1306 <led_off>
		}
	}
}
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <calculate_avg_temp>:

u16 calculate_avg_temp(u16 * arr)
{
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	27 97       	sbiw	r28, 0x07	; 7
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	9f 83       	std	Y+7, r25	; 0x07
    1a0a:	8e 83       	std	Y+6, r24	; 0x06
	u16 sum = 0;
    1a0c:	1d 82       	std	Y+5, r1	; 0x05
    1a0e:	1c 82       	std	Y+4, r1	; 0x04
	u16 avg;

	for(u8 i=0; i<NUM_OF_TEMP_MEASURES; i++){
    1a10:	19 82       	std	Y+1, r1	; 0x01
    1a12:	16 c0       	rjmp	.+44     	; 0x1a40 <calculate_avg_temp+0x4c>
		sum = sum + arr[i];
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	88 2f       	mov	r24, r24
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9c 01       	movw	r18, r24
    1a1c:	22 0f       	add	r18, r18
    1a1e:	33 1f       	adc	r19, r19
    1a20:	8e 81       	ldd	r24, Y+6	; 0x06
    1a22:	9f 81       	ldd	r25, Y+7	; 0x07
    1a24:	fc 01       	movw	r30, r24
    1a26:	e2 0f       	add	r30, r18
    1a28:	f3 1f       	adc	r31, r19
    1a2a:	20 81       	ld	r18, Z
    1a2c:	31 81       	ldd	r19, Z+1	; 0x01
    1a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a30:	9d 81       	ldd	r25, Y+5	; 0x05
    1a32:	82 0f       	add	r24, r18
    1a34:	93 1f       	adc	r25, r19
    1a36:	9d 83       	std	Y+5, r25	; 0x05
    1a38:	8c 83       	std	Y+4, r24	; 0x04
u16 calculate_avg_temp(u16 * arr)
{
	u16 sum = 0;
	u16 avg;

	for(u8 i=0; i<NUM_OF_TEMP_MEASURES; i++){
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	8f 5f       	subi	r24, 0xFF	; 255
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	8a 30       	cpi	r24, 0x0A	; 10
    1a44:	38 f3       	brcs	.-50     	; 0x1a14 <calculate_avg_temp+0x20>
		sum = sum + arr[i];
	}
	avg = (u16) sum / NUM_OF_TEMP_MEASURES;
    1a46:	8c 81       	ldd	r24, Y+4	; 0x04
    1a48:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4a:	2a e0       	ldi	r18, 0x0A	; 10
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	b9 01       	movw	r22, r18
    1a50:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__udivmodhi4>
    1a54:	cb 01       	movw	r24, r22
    1a56:	9b 83       	std	Y+3, r25	; 0x03
    1a58:	8a 83       	std	Y+2, r24	; 0x02
	return avg;
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1a5e:	27 96       	adiw	r28, 0x07	; 7
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <temp_arr_init>:

void temp_arr_init(void)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <temp_arr_init+0x6>
    1a76:	0f 92       	push	r0
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
	u16 first_temp = ADC_Read()*0.5;
    1a7c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <ADC_Read>
    1a80:	cc 01       	movw	r24, r24
    1a82:	a0 e0       	ldi	r26, 0x00	; 0
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	bc 01       	movw	r22, r24
    1a88:	cd 01       	movw	r24, r26
    1a8a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	5f e3       	ldi	r21, 0x3F	; 63
    1a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9b 83       	std	Y+3, r25	; 0x03
    1ab4:	8a 83       	std	Y+2, r24	; 0x02
	
	for (u8 i = 0; i<NUM_OF_TEMP_MEASURES; i++){
    1ab6:	19 82       	std	Y+1, r1	; 0x01
    1ab8:	0f c0       	rjmp	.+30     	; 0x1ad8 <temp_arr_init+0x68>
		temp_arr[i]= first_temp;
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	88 2f       	mov	r24, r24
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	e0 58       	subi	r30, 0x80	; 128
    1ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	80 83       	st	Z, r24

void temp_arr_init(void)
{
	u16 first_temp = ADC_Read()*0.5;
	
	for (u8 i = 0; i<NUM_OF_TEMP_MEASURES; i++){
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	8f 5f       	subi	r24, 0xFF	; 255
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	8a 30       	cpi	r24, 0x0A	; 10
    1adc:	70 f3       	brcs	.-36     	; 0x1aba <temp_arr_init+0x4a>
		temp_arr[i]= first_temp;
	}
	
	avg_temp = calculate_avg_temp(temp_arr);
    1ade:	80 e8       	ldi	r24, 0x80	; 128
    1ae0:	91 e0       	ldi	r25, 0x01	; 1
    1ae2:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <calculate_avg_temp>
    1ae6:	90 93 7d 01 	sts	0x017D, r25
    1aea:	80 93 7c 01 	sts	0x017C, r24
	arr_counter = 0;
    1aee:	10 92 73 01 	sts	0x0173, r1
}
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <add_new_temp>:


void add_new_temp(u16 * arr , u16 new_val)
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <add_new_temp+0x6>
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <add_new_temp+0x8>
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	7c 83       	std	Y+4, r23	; 0x04
    1b10:	6b 83       	std	Y+3, r22	; 0x03
	arr[arr_counter] = new_val;
    1b12:	80 91 73 01 	lds	r24, 0x0173
    1b16:	88 2f       	mov	r24, r24
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	9c 01       	movw	r18, r24
    1b1c:	22 0f       	add	r18, r18
    1b1e:	33 1f       	adc	r19, r19
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	fc 01       	movw	r30, r24
    1b26:	e2 0f       	add	r30, r18
    1b28:	f3 1f       	adc	r31, r19
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	80 83       	st	Z, r24
	arr_counter ++;
    1b32:	80 91 73 01 	lds	r24, 0x0173
    1b36:	8f 5f       	subi	r24, 0xFF	; 255
    1b38:	80 93 73 01 	sts	0x0173, r24
	
	if (arr_counter == 10){
    1b3c:	80 91 73 01 	lds	r24, 0x0173
    1b40:	8a 30       	cpi	r24, 0x0A	; 10
    1b42:	11 f4       	brne	.+4      	; 0x1b48 <add_new_temp+0x4a>
		arr_counter = 0;
    1b44:	10 92 73 01 	sts	0x0173, r1
	}
}
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <go_to_sleep>:


void go_to_sleep(void)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
	
	MCUCR&=~(1<<SM0);
    1b5e:	a5 e5       	ldi	r26, 0x55	; 85
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e5 e5       	ldi	r30, 0x55	; 85
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	8f 7e       	andi	r24, 0xEF	; 239
    1b6a:	8c 93       	st	X, r24
	MCUCR&=~(1<<SM1);
    1b6c:	a5 e5       	ldi	r26, 0x55	; 85
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e5 e5       	ldi	r30, 0x55	; 85
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	8f 7d       	andi	r24, 0xDF	; 223
    1b78:	8c 93       	st	X, r24
	MCUCR&=~(1<<SM2);
    1b7a:	a5 e5       	ldi	r26, 0x55	; 85
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e5 e5       	ldi	r30, 0x55	; 85
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	8f 77       	andi	r24, 0x7F	; 127
    1b86:	8c 93       	st	X, r24
	
	MCUCR|=(1<<SE);
    1b88:	a5 e5       	ldi	r26, 0x55	; 85
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e5 e5       	ldi	r30, 0x55	; 85
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	80 64       	ori	r24, 0x40	; 64
    1b94:	8c 93       	st	X, r24

}
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <main>:





int main(void){
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <main+0x6>
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62

	sys_init();
    1ba6:	0e 94 98 0b 	call	0x1730	; 0x1730 <sys_init>

	while(1){
		switch (Current_stat ){
    1baa:	80 91 7e 01 	lds	r24, 0x017E
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	3a 83       	std	Y+2, r19	; 0x02
    1bb4:	29 83       	std	Y+1, r18	; 0x01
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	81 30       	cpi	r24, 0x01	; 1
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	51 f0       	breq	.+20     	; 0x1bd4 <main+0x38>
    1bc0:	29 81       	ldd	r18, Y+1	; 0x01
    1bc2:	3a 81       	ldd	r19, Y+2	; 0x02
    1bc4:	22 30       	cpi	r18, 0x02	; 2
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	59 f0       	breq	.+22     	; 0x1be0 <main+0x44>
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	21 f0       	breq	.+8      	; 0x1bda <main+0x3e>
    1bd2:	eb cf       	rjmp	.-42     	; 0x1baa <main+0xe>
			case ON:{
				ON_stat();
    1bd4:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <ON_stat>
    1bd8:	e8 cf       	rjmp	.-48     	; 0x1baa <main+0xe>
				break;
			}
			case OFF:{
				OFF_stat();
    1bda:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <OFF_stat>
    1bde:	e5 cf       	rjmp	.-54     	; 0x1baa <main+0xe>
				break;
			}
			case SETTING:{
				SET_stat();
    1be0:	0e 94 3d 0c 	call	0x187a	; 0x187a <SET_stat>
    1be4:	e2 cf       	rjmp	.-60     	; 0x1baa <main+0xe>

00001be6 <__vector_3>:
ON/OFF_Button_INTERRUPT
-*----------------------------------------------------------------------------*/

void __vector_3 (void) __attribute__ ((signal,used, externally_visible)) ; \
    void __vector_3 (void)
{
    1be6:	1f 92       	push	r1
    1be8:	0f 92       	push	r0
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	0f 92       	push	r0
    1bee:	11 24       	eor	r1, r1
    1bf0:	2f 93       	push	r18
    1bf2:	3f 93       	push	r19
    1bf4:	4f 93       	push	r20
    1bf6:	5f 93       	push	r21
    1bf8:	6f 93       	push	r22
    1bfa:	7f 93       	push	r23
    1bfc:	8f 93       	push	r24
    1bfe:	9f 93       	push	r25
    1c00:	af 93       	push	r26
    1c02:	bf 93       	push	r27
    1c04:	ef 93       	push	r30
    1c06:	ff 93       	push	r31
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
	if(Current_stat ==OFF){
    1c10:	80 91 7e 01 	lds	r24, 0x017E
    1c14:	88 23       	and	r24, r24
    1c16:	71 f4       	brne	.+28     	; 0x1c34 <__vector_3+0x4e>
		Current_stat  = ON;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	80 93 7e 01 	sts	0x017E, r24
		desired_temp = EEPROM_read(0x0000);
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	0e 94 ca 08 	call	0x1194	; 0x1194 <EEPROM_read>
    1c26:	88 2f       	mov	r24, r24
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	90 93 77 01 	sts	0x0177, r25
    1c2e:	80 93 76 01 	sts	0x0176, r24
    1c32:	0a c0       	rjmp	.+20     	; 0x1c48 <__vector_3+0x62>
	}
	else if (Current_stat ==ON || Current_stat ==SETTING){
    1c34:	80 91 7e 01 	lds	r24, 0x017E
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	21 f0       	breq	.+8      	; 0x1c44 <__vector_3+0x5e>
    1c3c:	80 91 7e 01 	lds	r24, 0x017E
    1c40:	82 30       	cpi	r24, 0x02	; 2
    1c42:	11 f4       	brne	.+4      	; 0x1c48 <__vector_3+0x62>
		Current_stat  = OFF;
    1c44:	10 92 7e 01 	sts	0x017E, r1
	}
}
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	ff 91       	pop	r31
    1c4e:	ef 91       	pop	r30
    1c50:	bf 91       	pop	r27
    1c52:	af 91       	pop	r26
    1c54:	9f 91       	pop	r25
    1c56:	8f 91       	pop	r24
    1c58:	7f 91       	pop	r23
    1c5a:	6f 91       	pop	r22
    1c5c:	5f 91       	pop	r21
    1c5e:	4f 91       	pop	r20
    1c60:	3f 91       	pop	r19
    1c62:	2f 91       	pop	r18
    1c64:	0f 90       	pop	r0
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	0f 90       	pop	r0
    1c6a:	1f 90       	pop	r1
    1c6c:	18 95       	reti

00001c6e <__vector_7>:

//TRIGGERS EVERY 100MS

void __vector_7 (void) __attribute__ ((signal,used, externally_visible)) ; \
    void __vector_7 (void)
{
    1c6e:	1f 92       	push	r1
    1c70:	0f 92       	push	r0
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	0f 92       	push	r0
    1c76:	11 24       	eor	r1, r1
    1c78:	8f 93       	push	r24
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
	temp_measure_f = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	80 93 74 01 	sts	0x0174, r24
}
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	8f 91       	pop	r24
    1c8e:	0f 90       	pop	r0
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	0f 90       	pop	r0
    1c94:	1f 90       	pop	r1
    1c96:	18 95       	reti

00001c98 <__vector_10>:

//timer trriger

void __vector_10 (void) __attribute__ ((signal,used, externally_visible)) ; \
    void __vector_10 (void)
{
    1c98:	1f 92       	push	r1
    1c9a:	0f 92       	push	r0
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	0f 92       	push	r0
    1ca0:	11 24       	eor	r1, r1
    1ca2:	2f 93       	push	r18
    1ca4:	3f 93       	push	r19
    1ca6:	8f 93       	push	r24
    1ca8:	9f 93       	push	r25
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
	if ((Current_stat==SETTING) || (Current_stat==ON)){
    1cb2:	80 91 7e 01 	lds	r24, 0x017E
    1cb6:	82 30       	cpi	r24, 0x02	; 2
    1cb8:	21 f0       	breq	.+8      	; 0x1cc2 <__vector_10+0x2a>
    1cba:	80 91 7e 01 	lds	r24, 0x017E
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	01 f5       	brne	.+64     	; 0x1d02 <__vector_10+0x6a>
		setting_counter++;
    1cc2:	80 91 75 01 	lds	r24, 0x0175
    1cc6:	8f 5f       	subi	r24, 0xFF	; 255
    1cc8:	80 93 75 01 	sts	0x0175, r24
		if(setting_counter % 4 == 0){
    1ccc:	80 91 75 01 	lds	r24, 0x0175
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	83 70       	andi	r24, 0x03	; 3
    1cd6:	90 70       	andi	r25, 0x00	; 0
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	61 f4       	brne	.+24     	; 0x1cf4 <__vector_10+0x5c>
			toggle_f ^= 1;
    1cdc:	80 91 78 01 	lds	r24, 0x0178
    1ce0:	90 91 79 01 	lds	r25, 0x0179
    1ce4:	21 e0       	ldi	r18, 0x01	; 1
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	82 27       	eor	r24, r18
    1cea:	93 27       	eor	r25, r19
    1cec:	90 93 79 01 	sts	0x0179, r25
    1cf0:	80 93 78 01 	sts	0x0178, r24
		}
		if (setting_counter > 20){
    1cf4:	80 91 75 01 	lds	r24, 0x0175
    1cf8:	85 31       	cpi	r24, 0x15	; 21
    1cfa:	18 f0       	brcs	.+6      	; 0x1d02 <__vector_10+0x6a>

			Current_stat = ON;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	80 93 7e 01 	sts	0x017E, r24
		}
	}
}
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	9f 91       	pop	r25
    1d08:	8f 91       	pop	r24
    1d0a:	3f 91       	pop	r19
    1d0c:	2f 91       	pop	r18
    1d0e:	0f 90       	pop	r0
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	0f 90       	pop	r0
    1d14:	1f 90       	pop	r1
    1d16:	18 95       	reti

00001d18 <__udivmodhi4>:
    1d18:	aa 1b       	sub	r26, r26
    1d1a:	bb 1b       	sub	r27, r27
    1d1c:	51 e1       	ldi	r21, 0x11	; 17
    1d1e:	07 c0       	rjmp	.+14     	; 0x1d2e <__udivmodhi4_ep>

00001d20 <__udivmodhi4_loop>:
    1d20:	aa 1f       	adc	r26, r26
    1d22:	bb 1f       	adc	r27, r27
    1d24:	a6 17       	cp	r26, r22
    1d26:	b7 07       	cpc	r27, r23
    1d28:	10 f0       	brcs	.+4      	; 0x1d2e <__udivmodhi4_ep>
    1d2a:	a6 1b       	sub	r26, r22
    1d2c:	b7 0b       	sbc	r27, r23

00001d2e <__udivmodhi4_ep>:
    1d2e:	88 1f       	adc	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	5a 95       	dec	r21
    1d34:	a9 f7       	brne	.-22     	; 0x1d20 <__udivmodhi4_loop>
    1d36:	80 95       	com	r24
    1d38:	90 95       	com	r25
    1d3a:	bc 01       	movw	r22, r24
    1d3c:	cd 01       	movw	r24, r26
    1d3e:	08 95       	ret

00001d40 <__divmodhi4>:
    1d40:	97 fb       	bst	r25, 7
    1d42:	09 2e       	mov	r0, r25
    1d44:	07 26       	eor	r0, r23
    1d46:	0a d0       	rcall	.+20     	; 0x1d5c <__divmodhi4_neg1>
    1d48:	77 fd       	sbrc	r23, 7
    1d4a:	04 d0       	rcall	.+8      	; 0x1d54 <__divmodhi4_neg2>
    1d4c:	e5 df       	rcall	.-54     	; 0x1d18 <__udivmodhi4>
    1d4e:	06 d0       	rcall	.+12     	; 0x1d5c <__divmodhi4_neg1>
    1d50:	00 20       	and	r0, r0
    1d52:	1a f4       	brpl	.+6      	; 0x1d5a <__divmodhi4_exit>

00001d54 <__divmodhi4_neg2>:
    1d54:	70 95       	com	r23
    1d56:	61 95       	neg	r22
    1d58:	7f 4f       	sbci	r23, 0xFF	; 255

00001d5a <__divmodhi4_exit>:
    1d5a:	08 95       	ret

00001d5c <__divmodhi4_neg1>:
    1d5c:	f6 f7       	brtc	.-4      	; 0x1d5a <__divmodhi4_exit>
    1d5e:	90 95       	com	r25
    1d60:	81 95       	neg	r24
    1d62:	9f 4f       	sbci	r25, 0xFF	; 255
    1d64:	08 95       	ret

00001d66 <__prologue_saves__>:
    1d66:	2f 92       	push	r2
    1d68:	3f 92       	push	r3
    1d6a:	4f 92       	push	r4
    1d6c:	5f 92       	push	r5
    1d6e:	6f 92       	push	r6
    1d70:	7f 92       	push	r7
    1d72:	8f 92       	push	r8
    1d74:	9f 92       	push	r9
    1d76:	af 92       	push	r10
    1d78:	bf 92       	push	r11
    1d7a:	cf 92       	push	r12
    1d7c:	df 92       	push	r13
    1d7e:	ef 92       	push	r14
    1d80:	ff 92       	push	r15
    1d82:	0f 93       	push	r16
    1d84:	1f 93       	push	r17
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	ca 1b       	sub	r28, r26
    1d90:	db 0b       	sbc	r29, r27
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	09 94       	ijmp

00001d9e <__epilogue_restores__>:
    1d9e:	2a 88       	ldd	r2, Y+18	; 0x12
    1da0:	39 88       	ldd	r3, Y+17	; 0x11
    1da2:	48 88       	ldd	r4, Y+16	; 0x10
    1da4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1da6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1da8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1daa:	8c 84       	ldd	r8, Y+12	; 0x0c
    1dac:	9b 84       	ldd	r9, Y+11	; 0x0b
    1dae:	aa 84       	ldd	r10, Y+10	; 0x0a
    1db0:	b9 84       	ldd	r11, Y+9	; 0x09
    1db2:	c8 84       	ldd	r12, Y+8	; 0x08
    1db4:	df 80       	ldd	r13, Y+7	; 0x07
    1db6:	ee 80       	ldd	r14, Y+6	; 0x06
    1db8:	fd 80       	ldd	r15, Y+5	; 0x05
    1dba:	0c 81       	ldd	r16, Y+4	; 0x04
    1dbc:	1b 81       	ldd	r17, Y+3	; 0x03
    1dbe:	aa 81       	ldd	r26, Y+2	; 0x02
    1dc0:	b9 81       	ldd	r27, Y+1	; 0x01
    1dc2:	ce 0f       	add	r28, r30
    1dc4:	d1 1d       	adc	r29, r1
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	ed 01       	movw	r28, r26
    1dd2:	08 95       	ret

00001dd4 <_exit>:
    1dd4:	f8 94       	cli

00001dd6 <__stop_program>:
    1dd6:	ff cf       	rjmp	.-2      	; 0x1dd6 <__stop_program>
